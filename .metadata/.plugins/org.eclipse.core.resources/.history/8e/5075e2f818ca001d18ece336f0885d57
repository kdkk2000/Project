package com.lec.ex.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.lec.ex.dto.UserDto;

public class UserDao {
	public static final int EXISTENT = 0;
	public static final int NONEXISTENT = 1;
	public static final int LOGIN_FAIL = 0;
	public static final int LOGIN_SUCCESS = 1;
	public static final int FAIL = 0;
	public static final int SUCCESS = 1;
	private DataSource ds;
	
	private static UserDao instance = new UserDao();

	public static UserDao getInstance() {
		return instance;
	}

	private UserDao() {
		try {
			Context ctx = new InitialContext();
			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/Oracle11g");
		} catch (NamingException e) {
			System.out.println(e.getMessage());
		}
	}
	
	// 1. 회원id 중복체크
	public int userIdConfirm(String userId) {
		int result = EXISTENT;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "SELECT * FROM USERS WHERE userId=?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				result = EXISTENT;
			} else {
				result = NONEXISTENT;
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (rs != null)	   rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null)  conn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		return result;
	}
	// 2. 이메일 중복 체크
	public int userEmailConfirm(String userEmail) {
		int result = EXISTENT;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "SELECT COUNT(*) CNT FROM USERS WHERE userEmail=?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userEmail);
			rs = pstmt.executeQuery();
			rs.next();
			int cnt = rs.getInt("cnt");
			if (cnt == 1) {
				result = EXISTENT;
			} else if (cnt == 0) {
				result = NONEXISTENT;
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (rs != null)    rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null)  conn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		return result;
	}
	// 3. 회원가입
	public int joinUser(UserDto user) {
	    int result = FAIL;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    String sql = "INSERT INTO USERS "
	            + "(userId, userPw, userName, userEmail, userPhone, userAddress) "
	            + "VALUES (?, ?, ?, ?, ?, ?)";
	    try {
	        conn = ds.getConnection();
	        pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, user.getUserId());
	        pstmt.setString(2, user.getUserPw());
	        pstmt.setString(3, user.getUserName());
	        pstmt.setString(4, user.getUserEmail());
	        pstmt.setString(5, user.getUserPhone());
	        pstmt.setString(6, user.getUserAddress());
	        result = pstmt.executeUpdate();
	    } catch (Exception e) {
	        System.out.println(e.getMessage());
	    } finally {
	        try {
	            if(pstmt != null) pstmt.close();
	            if(conn != null) conn.close();
	        } catch (Exception e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    return result;
	}
	// 4. 로그인 체크
	public int loginCheck(String userId, String userPw) {
	    int result = LOGIN_FAIL;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    String sql = "SELECT * FROM USERS WHERE userId=?";
	    try {
	        conn = ds.getConnection();
	        pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, userId);
	        rs = pstmt.executeQuery();
	        if (rs.next()) {
	            String dbPw = rs.getString("userPw");
	            if (dbPw.equals(userPw)) {
	                result = LOGIN_SUCCESS;
	            }
	        }
	    } catch (Exception e) {
	        System.out.println(e.getMessage());
		}finally {
			try {
				if(rs    != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn  != null) conn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
	    }
	    return result;
	}
	// 5. userId로 dto 가져오기(로그인 성공시 session에 넣기 위함)
	public UserDto getUser(String userId) {
	    UserDto user = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    String sql = "SELECT * FROM USERS WHERE userId=?";
	    try {
	        conn = ds.getConnection();
	        pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, userId);
	        rs = pstmt.executeQuery();
	        if (rs.next()) {
	            user = new UserDto();
	            String userPw = rs.getString("userPw");
	            String userName = rs.getString("userName");
	            String userEmail = rs.getString("userEmail");
	            String userPhone = rs.getString("userPhone");
	            String userAddress=rs.getString("userAddress");
	            Date userDate = rs.getDate("userDate");
	            
	            user = new UserDto(userId, userPw, userName, userEmail, userPhone, userAddress, userDate);
	        }
	    } catch (Exception e) {
	        System.out.println(e.getMessage());
	    } finally {
	        try {
	            if(rs    != null) rs.close();
	            if(pstmt != null) pstmt.close();
	            if(conn  != null) conn.close();
	        } catch (Exception e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    return user;
	}
	// 6. 회원정보 수정
	public int modifyUser(UserDto user) {
		int result = FAIL;
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "UPDATE USERS SET "
								+ "userPw=?, "
								+ "userName=?, "
								+ "userEmail=?, "
								+ "userPhone=?, "
								+ "userAddress=? " + 
								"WHERE userId=?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, user.getUserPw());
			pstmt.setString(2, user.getUserName());
			pstmt.setString(3, user.getUserEmail());
			pstmt.setString(4, user.getUserPhone());
			pstmt.setString(5, user.getUserAddress());
			pstmt.setString(6, user.getUserId());
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn  != null) conn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		return result;
	}
		
		// 7. 전체 회원 리스트
		public ArrayList<UserDto> AllUserlist(int startRow, int endRow) {
			ArrayList<UserDto> users = new ArrayList<UserDto>();
			Connection        conn  = null;
			PreparedStatement pstmt = null;
			ResultSet         rs    = null;
			String sql = "SELECT * " + 
					"    FROM (SELECT ROWNUM RN, A.* FROM (SELECT * FROM USERS ORDER BY userDate DESC) A)" + 
					"    WHERE RN BETWEEN ? AND ?";
			try {
				conn = ds.getConnection();
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
				rs = pstmt.executeQuery();
				while(rs.next()) {
					String userId = rs.getString("userId");
					String userPw = rs.getString("userPw");
					String userName = rs.getString("userName");
					String userEmail = rs.getString("userEmail");
					String userPhone = rs.getString("userPhone");
					String userAddress = rs.getString("userAddress");
					Date userDate = rs.getDate("userDate");
					users.add(new UserDto(userId, userPw, userName, userEmail, userPhone, userAddress));
				}
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}finally {
				try {
					if(rs    != null) rs.close();
					if(pstmt != null) pstmt.close();
					if(conn  != null) conn.close();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			}
			return users;
		}
		// 8. 전체 회원가입한 회원수
		public int getUserTotCnt() {
			int totCnt = 0;
			Connection        conn  = null;
			PreparedStatement pstmt = null;
			ResultSet         rs    = null;
			String sql = "SELECT COUNT(*) CNT FROM USERS";
			try {
				conn = ds.getConnection();
				pstmt = conn.prepareStatement(sql);
				rs = pstmt.executeQuery();
				rs.next();
				totCnt = rs.getInt("cnt");
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}finally {
				try {
					if(rs    != null) rs.close();
					if(pstmt != null) pstmt.close();
					if(conn  != null) conn.close();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			}
			return totCnt;
		}
		// 9. 회원탈퇴
		public int deleteUser(String userId) {
			int result = FAIL;
			Connection        conn  = null;
			PreparedStatement pstmt = null;
			String sql = "DELETE FROM USERS WHERE userId = ?";
			try {
				conn = ds.getConnection();
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, userId);
				result = pstmt.executeUpdate();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}finally {
				try {
					if(pstmt != null) pstmt.close();
					if(conn  != null) conn.close();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			}
			return result;
		}
	}