---------- AdminDao 관련(관리자 등록,전체보기,특정 관리작 보기, 정보변경, 삭제) --------------
DROP TABLE ADMINS;

CREATE TABLE ADMINS (
    adminId VARCHAR2(50) PRIMARY KEY,
    adminPw VARCHAR2(50) NOT NULL,
    adminName VARCHAR2(50) NOT NULL,
    adminEmail VARCHAR2(100) NOT NULL,
    adminPhone VARCHAR2(50) NOT NULL
);
-- 1. 관리자 등록
INSERT INTO ADMINS (adminId, adminPw, adminName, adminEmail, adminPhone) VALUES ('aaa', 'a', '관리자', 'admin@add.co.kr', '010-1234-1234');

-- 2. 관리자 전체보기
SELECT * FROM ADMINS;

-- 3. 특정 아이디를 가진 관리자 보기
SELECT * FROM ADMINS WHERE adminId = 'aaa';

-- 4. 관리자 정보 변경
UPDATE ADMINS SET adminPw = 'b', adminName = '변경된 관리자 이름', adminEmail = 'admin1@add.co.kr', adminPhone = '010-1234-1234' WHERE adminId = 'aaa';

-- 5. 관리자 삭제
DELETE FROM ADMINS WHERE adminId = 'aaa';

commit;

--==================================================================================--
---------- USERDao 관련(회원id 중복체크, 이메일 중복 체크, 회원가입, 로그인 체크, userId로 dto 가져오기, 회원정보 수정, 전체 회원 리스트, 전체 가입수, 회원 탈퇴  )--------------
DROP TABLE USERS;

CREATE TABLE USERS (
    userId VARCHAR2(50) PRIMARY KEY,
    userPw VARCHAR2(50) NOT NULL,
    userName VARCHAR2(50) NOT NULL,
    userEmail VARCHAR2(100) UNIQUE NOT NULL,
    userPhone VARCHAR2(50) NOT NULL,
    userAddress VARCHAR2(200),
    userDate DATE DEFAULT SYSDATE
);
-- 1. 회원id 중복체크
SELECT * FROM USERS WHERE userId='aaa';

-- 2. 이메일 중복 체크
SELECT COUNT(*) CNT FROM USERS WHERE userEmail='aaa@a.a';

-- 3. 회원가입
INSERT INTO USERS (userId, userPw, userName, userEmail, userPhone, userAddress) 
VALUES ('aaa', 'a', '홍', 'aaa@a.a', '010-1234-1234', '서울시 서대문구');

-- 4. 로그인 체크
SELECT * FROM USERS WHERE userId='aaa';

-- 5. userId로 dto 가져오기(로그인 성공시 session에 넣기 위함)
SELECT * FROM USERS WHERE userId='aaa';

-- 6. 회원정보 수정
UPDATE USERS SET userPw='s', userName='나', userEmail='a1@ma.co.kr', userPhone='010-8520-0258', userAddress='서울시 마포구' 
WHERE userId='aaa';

-- 7. 전체 회원 리스트
SELECT * 
    FROM (SELECT ROWNUM RN, A.* FROM (SELECT * FROM USERS ORDER BY userDate DESC) A) 
    WHERE RN BETWEEN 1 AND 3;

-- 8. 전체 회원가입한 회원수
SELECT COUNT(*) CNT FROM USERS;

-- 9. 회원탈퇴
DELETE FROM USERS 
WHERE userId = 'aaa';

commit;

--==================================================================================--
---------- BoardDao 관련(글 작성, 글 상세보기, 글 수정, 글 답변, 글 삭제 등)--------------
DROP TABLE FILEBOARD;
DROP SEQUENCE FILEBOARD_SEQ;

CREATE SEQUENCE FILEBOARD_SEQ START WITH 1 INCREMENT BY 1;

CREATE TABLE FILEBOARD (
    boardId NUMBER(6) PRIMARY KEY NOT NULL,
    userId VARCHAR2(50) REFERENCES USERS(userId),
    adminId VARCHAR2(50) REFERENCES ADMINS(adminId),
    boardTitle VARCHAR2(100) NOT NULL,
    boardContent VARCHAR2(4000) NOT NULL,
    boardFileName VARCHAR2(100) NOT NULL,
    boardDate DATE,
    boardHit NUMBER(6),
    boardGroup NUMBER(6),
    boardStep NUMBER(6),
    boardIndent NUMBER(6),
    boardIp VARCHAR2(30)
);

-- (1) 글목록(startRow~endRow)
SELECT F.*, userName FROM FILEBOARD F, USERS U
  WHERE F.userId=U.userId 
  ORDER BY boardGroup DESC, boardStep; -- 출력 기준
  
SELECT * FROM
  (SELECT ROWNUM RN, A.* FROM (SELECT F.*, userName FROM FILEBOARD F, USERS U
                              WHERE F.userId=U.userId 
                              ORDER BY boardGroup DESC, boardStep) A)
  WHERE RN BETWEEN 2 AND 4; -- dao에 쓸 query
  
-- (2) 글갯수
SELECT COUNT(*) FROM FILEBOARD;

-- (3) 글쓰기(원글쓰기)
INSERT INTO FILEBOARD (boardId, userId, boardTitle, boardContent, boardFileName, boardGroup, boardStep, boardIndent, boardIp)
  VALUES (FILEBOARD_SEQ.NEXTVAL, 'aaa','토트넘','난 공격수', 'a.docx', 
    FILEBOARD_SEQ.CURRVAL, 0,0, '192.168.0.31');
    
-- (4) hit 1회 올리기
UPDATE FILEBOARD SET boardHit = boardHit + 1 WHERE boardId=1;

-- (5) 글번호(boardId)로 글전체 내용(BoardDto) 가져오기
SELECT F.*, userName
  FROM FILEBOARD F, USERS U WHERE F.userId=U.userId AND boardId=1;
  
-- (6) 글 수정하기(boardId, boardTitle, boardContent, boardFileName, boardDate(SYSDATE), boardIp 수정)
UPDATE FILEBOARD SET boardTitle = '바뀐제목',
                    boardContent = '바뀐본문',
                    boardFileName = NULL,
                    boardIp = '192.168.151.10',
                    boardDate = SYSDATE
            WHERE boardId = 1;

COMMIT;            
-- (7) 글 삭제하기
-- 글 삭제시 해당 글 하나 삭제하기 (삭제하려는 글의 boardId필요)
DELETE FROM FILEBOARD WHERE boardId=1;
ROLLBACK;
SELECT * FROM FILEBOARD ORDER BY boardGroup DESC, boardStep;
-- 글 삭제시 답변글까지 삭제하는 로직(삭제하려는 글의 boardGroup, boardStep, boardIndent 필요)
DELETE FROM FILEBOARD WHERE boardGroup = 127 AND (boardStep>=0 AND 
    boardStep<(SELECT NVL(MIN(boardStep),9999) 
          FROM FILEBOARD WHERE boardGroup=127 AND boardStep>0 AND boardIndent<=0));
UPDATE FILEBOARD SET boardStep = boardStep-2 WHERE boardGroup=2 AND boardStep>1;-- 생략 가능(2은 위의 DELETE문 수행결과)
COMMIT;

-- (8) 답변글 쓰기 전 단계(원글의 boardGroup과 같고, 원글의 boardStep보다 크면 boardStep을 하나 증가하기)
UPDATE FILEBOARD SET boardStep = boardStep + 1 WHERE boardGroup=5 AND boardStep>0;

-- (9) 답변글 쓰기
INSERT INTO FILEBOARD (boardId, userId, boardTitle, boardContent, boardFileName, boardGroup, boardStep, boardIndent, boardIp)
  VALUES (FILEBOARD_SEQ.NEXTVAL, 'aaa','박지성 아님', '잘한다', '사진', 
    5, 1, 1, '194.161.13.11');
    
-- (10) 회원탈퇴시 탈퇴하는 회원(userId)이 쓴 글 모두 삭제하기
DELETE FROM FILEBOARD WHERE userId='song';

commit;

--==================================================================================--
---------- CommentDao 관련(댓글 작성, 목록보기, 수정, 삭제)--------------
DROP TABLE Bcomment;
DROP SEQUENCE Bcomment_seq;

CREATE SEQUENCE Bcomment_seq START WITH 1 INCREMENT BY 1;

CREATE TABLE Bcomment(
  cID NUMBER(6) PRIMARY KEY,
  bID NUMBER(6) REFERENCES Board(bID),
  userId VARCHAR2(50) REFERENCES USER(userId),
  adminId VARCHAR2(50) REFERENCES Admin(adminId),
  Ccomment VARCHAR2(4000) NOT NULL,
  reviewDate DATE NOT NULL
);
-- 1. 댓글 작성
INSERT INTO Bcomment (cID, bID, userId, adminId, Ccomment, reviewDate)
    VALUES (Bcomment_seq.nextval, '2', 'aaa', 'aaa', '예뻐요', sysdate);

-- 2. 댓글 목록
SELECT * FROM Bcomment WHERE bID='2' ORDER BY cID DESC;

-- 3. 댓글 수정
UPDATE Bcomment SET Ccomment='hi', reviewDate=sysdate WHERE cID=1;

-- 4. 댓글 삭제
DELETE FROM Bcomment WHERE cID=1;

commit;

--==================================================================================--
---------- NoticeDao 관련(공지사항 전체조회, 상세조회, 등록, 수정, 삭제)--------------
DROP TABLE Notice;
DROP SEQUENCE Notice_seq;

CREATE SEQUENCE Notice_seq
    START WITH 1
    INCREMENT BY 1
    NOCACHE 
    NOCYCLE;
    
CREATE TABLE Notice (
    noticeId NUMBER(2) PRIMARY KEY,
    adminId VARCHAR2(50) REFERENCES ADMINS(adminId),
    noticeTitle VARCHAR2(200) NOT NULL,
    noticeContent VARCHAR2(4000) NOT NULL,
    noticeDate DATE NOT NULL
);

-- 1. 공지사항 전체 조회
SELECT * FROM Notice ORDER BY noticeId DESC;

-- 2. 공지사항 상세 조회
SELECT * FROM Notice WHERE noticeId = '1';

-- 3. 공지사항 등록
INSERT INTO Notice(noticeId, adminId, noticeTitle, noticeContent, noticeDate) 
    VALUES (Notice_seq.nextval, 'aaa', '공지', '사항', sysdate);

SELECT MAX(noticeId) FROM Notice;
-- 4. 공지사항 수정
UPDATE Notice SET noticeTitle='사항', noticeContent='공지', noticeDate=sysdate, noticeId='1' WHERE adminId='aaa';

-- 5. 공지사항 삭제
DELETE FROM Notice WHERE noticeId = 'a' AND adminId = 'aaa';

commit;

--==================================================================================--
---------- ProductDao 관련(상품 전체조회, 상세조회, 등록, 수정, 삭제)--------------
DROP TABLE Product;
DROP SEQUENCE Product_seq;

CREATE SEQUENCE Product_seq
  START WITH 1
  INCREMENT BY 1
  MAXVALUE 99
  NOCYCLE
  NOCACHE;
  
CREATE TABLE Product (
  productId NUMBER(2) PRIMARY KEY,
  producName VARCHAR2(50) NOT NULL,
  producDescription VARCHAR2(4000) NOT NULL,
  producImage VARCHAR2(4000) NOT NULL
);

-- 1. 상품 전체 조회 쿼리
SELECT * FROM Product ORDER BY productId DESC;

-- 2. 상품 상세 조회 쿼리
SELECT * FROM Product WHERE productId = '1';

-- 3. 상품 등록 쿼리
INSERT INTO Product VALUES (Product_seq.nextval, '동글이컷', '동글동글해져요', 'NULL');

-- 4. 상품 수정 쿼리
UPDATE Product SET producName='네모컷', producDescription='네모네모해져요', producImage='NULL' WHERE productId='1';

-- 5. 상품 삭제 쿼리
DELETE FROM Product WHERE productId = '1';

commit;

--==================================================================================--
---------- ReviewDao 관련(리뷰 전체조회, 상세조회, 등록, 수정, 삭제)--------------
DROP TABLE PRODUCT_REVIEW;
DROP SEQUENCE Product_seq;

CREATE SEQUENCE Review_seq
  START WITH 1
  INCREMENT BY 1
  MAXVALUE 9999
  NOCYCLE
  NOCACHE;
  
CREATE TABLE PRODUCT_REVIEW (
    reviewId NUMBER(2) PRIMARY KEY,
    reviewContent VARCHAR2(4000) NOT NULL,
    reviewRating NUMBER(2) NOT NULL,
    reviewDate DATE NOT NULL,
    productId NUMBER(2) REFERENCES PRODUCT(productId),
    userId VARCHAR2(50) REFERENCES USERS(userId)
);

-- 1. 모든 리뷰 조회
SELECT * FROM Product_review ORDER BY reviewId DESC;

-- 2. 특정 리뷰 조회
SELECT * FROM Product_review WHERE productId = '1' ORDER BY reviewId DESC;

-- 3. 리뷰 등록
INSERT INTO Product_review VALUES (Review_seq.nextval, '좋아요', '1', SYSDATE, '1', 'aaa');

-- 4. 리뷰 수정
UPDATE Product_review SET reviewContent='너무 예뻐요', reviewRating='10', reviewDate=SYSDATE WHERE reviewId='1' AND userId='aaa';

-- 5. 리뷰 삭제
DELETE FROM Product_review WHERE reviewId = '1' AND userId='aaa';

commit;

