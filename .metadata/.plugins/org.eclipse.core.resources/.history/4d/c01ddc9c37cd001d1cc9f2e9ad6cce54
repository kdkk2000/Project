package com.lec.ex.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.lec.ex.dto.BoardDto;
import com.lec.ex.dto.NoticeDto;

public class NoticeDao {
	public static final int FAIL = 0;
	public static final int SUCCESS = 1;
    private DataSource ds;
    
    private static NoticeDao instance = new NoticeDao();
    public static NoticeDao getInstance() {
        return instance;
    }

	private NoticeDao() {
		try {
			Context ctx = new InitialContext();
			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/Oracle11g");
		} catch (NamingException e) {
			System.out.println(e.getMessage());
		}
	}
	
    // 1. 공지사항 전체 조회
	public ArrayList<BoardDto> listBoard(int startRow, int endRow) {
	    ArrayList<NoticeDto> dtos = new ArrayList<NoticeDto>();
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    ResultSet rs = null;
	    String sql = "SELECT * FROM notice ORDER BY noticeId DESC";
	    try {
	        conn = ds.getConnection();
	        pstmt = conn.prepareStatement(sql);
	        rs = pstmt.executeQuery();
	        while (rs.next()) {
	            int noticeId = rs.getInt("noticeId");
	            String noticeTitle = rs.getString("noticeTitle");
	            String noticeContent = rs.getString("noticeContent");
	            Date noticeDate = rs.getDate("noticeDate");
	            String adminId = rs.getString("adminId");
	            dtos.add(new NoticeDto(noticeId, noticeTitle, noticeContent, noticeDate, adminId));
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    } finally {
	        try {
	            if (rs != null)
	                rs.close();
	            if (pstmt != null)
	                pstmt.close();
	            if (conn != null)
	                conn.close();
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }
	    return dtos;
	}
    // 2. 공지사항 상세 조회
    public NoticeDto selectById(int noticeId) {
        NoticeDto dto = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        String sql = "SELECT * FROM Notice WHERE noticeId = ?";
        try {
            conn = ds.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, noticeId);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                String noticeTitle = rs.getString("noticeTitle");
                String noticeContent = rs.getString("noticeContent");
                Date noticeDate = rs.getDate("noticeDate");
                String adminId = rs.getString("adminId");
                dto = new NoticeDto(noticeId, noticeTitle, noticeContent, noticeDate, adminId);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return dto;
    }
    // 3. 공지사항 등록
    public int writeNotice(NoticeDto dto) {
        int result = 0;
        Connection conn = null;
        PreparedStatement pstmt = null;
        String sql = "INSERT INTO Notice(noticeId, adminId, noticeTitle, noticeContent, noticeDate)" + 
        		"    VALUES (Notice_seq.nextval, ?, ?, '?, sysdate)";
        try {
            conn = ds.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, dto.getAdminId());
            pstmt.setString(2, dto.getNoticeTitle());
            pstmt.setString(3, dto.getNoticeContent());
            result = pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }
    // 4. 공지사항 수정
    public int update(NoticeDto dto, String adminId) {
        int result = 0;
        Connection conn = null;
        PreparedStatement pstmt = null;
        String sql = "UPDATE Notice SET noticeTitle=?, noticeContent=?, noticeDate=sysdate, noticeId=? WHERE adminId=?";
        try {
            conn = ds.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, dto.getNoticeTitle());
            pstmt.setString(2, dto.getNoticeContent());
            pstmt.setInt(3, dto.getNoticeId());
            pstmt.setString(4, adminId);

            result = pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }
    // 5. 공지사항 삭제
    public int delete(int noticeId, String adminId) {
        int result = 0;
        Connection conn = null;
        PreparedStatement pstmt = null;
        String sql = "DELETE FROM Notice WHERE noticeId = ? AND adminId = ?";
        try {
            conn = ds.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, noticeId);
            pstmt.setString(2, adminId);

            result = pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }
}